from heapq import *
class Location:

  def __init__(self, x, y):
    self.x = x
    self.y = y

  # used for max-heap
  def __lt__(self, other):
    return self.distance_from_user() > other.distance_from_user()

  def distance_from_user(self):
    # ignoring sqrt to calculate the distance
    return (self.x * self.x) + (self.y * self.y)

  def print_location(self):
    print("[" + str(self.x) + ", " + str(self.y) + "] ", end='')


def find_closest_drivers(locations, k):
  maxHeap = []
  # put first 'k' locations in the max heap
  for i in range(k):
    heappush(maxHeap, locations[i])

  # go through the remaining locations of the input array, if a point is closer to the origin than the top point
  # of the max-heap, remove the top point from heap and add the point from the input array
  for i in range(k, len(locations)):
    if locations[i].distance_from_user() < maxHeap[0].distance_from_user():
      heappop(maxHeap)
      heappush(maxHeap, locations[i])

  # the heap has 'k' locations closest to the origin, return them in a list
  return list(maxHeap)



result = find_closest_drivers([Location(1, 3), Location(3, 4), Location(2, -1)], 2)
print("Here are the k drivers locations closest to the user in the Seattle area: ", end='')
for location in result:
  location.print_location()