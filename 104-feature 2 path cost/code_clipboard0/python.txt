#This method calculates the amount of water trapped. The only argument
#passed is the elevation map, in form of a list.

def path_cost(elevation_map):
  
  water = 0 #keeps track of the total water as we traverse the elevation map

  n = len(elevation_map) #number of points on the map
  
  #lists to store the left_max and right_max of each point in the map

  left_max = [0]*n 
  right_max = [0]*n 
  
  #default values
  left_max[0] = elevation_map[0]
  right_max[n-1] = elevation_map[n-1]

  #filling the left_max list
  for i in range(1,n):
    left_max[i] = max(left_max[i-1], elevation_map[i])

  #filling the right_max list
  for i in range(n-2, -1, -1):
    right_max[i] = max(right_max[i+1], elevation_map[i])

  #calculating the amount of water
  for i in range(n):
    water += min(left_max[i],right_max[i]) - elevation_map[i]

  return water

# Driver code
elevation_map = [1, 2, 1, 3, 1, 2, 1, 4, 1, 0, 0, 2, 1, 4]
print("Accumulated water:", str(path_cost(elevation_map)) + "cm")