import collections
from collections import defaultdict

def get_total_cost(G_map, path_costs, drivers, user):

    city = defaultdict(defaultdict)

    def backtrack_evaluate(curr_node, target_node, acc_sum, visited):
        visited.add(curr_node)
        ret = -1.0
        neighbors = city[curr_node]
        if target_node in neighbors:
            ret = acc_sum + neighbors[target_node]
        else:
            for neighbor, value in neighbors.items():
                if neighbor in visited:
                    continue
                ret = backtrack_evaluate(
                    neighbor, target_node, acc_sum + value, visited)
                if ret != -1.0:
                    break
        visited.remove(curr_node)
        return ret

    # Step 1). build the city from the G_map
    for (source_node, dest_node), path_cost in zip(G_map, path_costs):
        # add nodes and two edges into the city
        city[source_node][dest_node] = path_cost
        city[dest_node][source_node] = path_cost

    # Step 2). Evaluate each driver via backtracking (DFS)
    #  by verifying if there exists a path from driver to user
    results = []
    for driver in drivers:
        if driver not in city or user not in city:
            # Either node does not exist
            ret = -1.0
        else:
            visited = set()
            ret = backtrack_evaluate(driver, user, 0, visited)
        results.append(ret)

    return results

# Driver code
G_map = [["a","b"],["b","c"],["a","e"],["d","e"]]
path_costs = [12.0,23.0,26.0,18.0]
drivers = ["c", "d", "e", "f"]
user = "a"
all_path_costs = get_total_cost(G_map, path_costs, drivers, user)
print("Total cost of all paths", all_path_costs)