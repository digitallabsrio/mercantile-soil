def backtrack(first,size, movies, output):
    # if all integers are used up
    if first == size:  
        output.append(movies[:])
    for i in range(first, size):
        # place i-th integer first 
        # in the current permutation
        movies[first], movies[i] = movies[i], movies[first]
        # use next integers to complete the permutations
        backtrack(first + 1,size, movies, output)
        # backtrack
        movies[first], movies[i] = movies[i], movies[first]

def generate_permutations(movies):
    
    size = len(movies)
    output = []
    backtrack(0, size, movies, output);
    return output

# Example #1
input = ["Frozen","Dune","Coco"]
output = generate_permutations(input)
print("Output 1: ", output)

# Example #2
input2 = ["Frozen","Dune","Coco","Melificient"]
output = generate_permutations(input2)
print("Output 2: ",output)

# Example #3
input3 = ["Dune","Coco"]
output = generate_permutations(input3)
print("Output 3: " , output)