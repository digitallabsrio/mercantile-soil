from collections import deque
def update_configuration(grid):
  queue = deque()

  # Step 1). build the initial set of updated routers
  rows, cols = len(grid), len(grid[0])
  for r in range(rows):
    for c in range(cols):
        if grid[r][c] == 2:
            queue.append((r, c))

  # Mark the round / level, _i.e_ the ticker of timestamp
  queue.append((-1, -1))

  # Step 2). start the transmitting process via BFS
  minutes_elapsed = -1
  # Four Neigbors, up, right, down and left
  directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
  while queue:
    row, col = queue.popleft()
    if row == -1:
      # We finish one round of processing
      minutes_elapsed += 1
      if queue:  # to avoid the endless loop
          queue.append((-1, -1))
    else:
      # this is an updated router
      # then it would transmit the update to its neighbors
      for d in directions:
        neighbor_row, neighbor_col = row + d[0], col + d[1]
        if rows > neighbor_row >= 0 and cols > neighbor_col >= 0:
          if grid[neighbor_row][neighbor_col] == 1:
            # this router would be updated
            grid[neighbor_row][neighbor_col] = 2
            # this router would then transmit to other routers
            queue.append((neighbor_row, neighbor_col))

  # return elapsed minutes
  return minutes_elapsed

# Driver Code
grid = [[1, 1, 0, 0, 1], [0, 1, 0, 1, 1], [1, 1, 2, 0, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1]]
print(update_configuration(grid))