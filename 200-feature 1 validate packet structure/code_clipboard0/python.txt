def validate_packet_structure(data):
    
    # Number of bytes in the current packet
    n_bytes = 0

    # Mask to check two most significant bits in a byte.
    mask1 = 1 << 7
    mask2 = 1 << 6

    # For each integer in the data array.
    for num in data:

        # If this is the case then we are to start processing a new packet.
        mask = 1 << 7
        if n_bytes == 0:
            while mask & num:
                n_bytes += 1
                mask = mask >> 1

            # 1 byte packets
            if n_bytes == 0:
                continue

            # Invalid scenarios according to the rules of the problem.
            if n_bytes == 1 or n_bytes > 4:
                return False
        else:

            # num should have most significant bit set and
            # second most significant bit unset. So, we use the two masks
            # to make sure this is the case.
            if not (num & mask1 and not (num & mask2)):
                return False
        
        # We reduce the number of bytes to process by 1 after each integer.
        n_bytes -= 1
    
    # This is for the case where we might not have the complete data for
    # a particular packet.
    return n_bytes == 0   

# driver code

# Example - 1
data = [193, 129, 3]
print(validate_packet_structure(data))

# Example - 2
data = [230, 129, 7]
print(validate_packet_structure(data))

# Example - 3
data = [248, 129, 129, 129, 129]
print(validate_packet_structure(data))  