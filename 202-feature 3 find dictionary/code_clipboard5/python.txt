from collections import defaultdict, Counter, deque
def find_dictionary(messages):

    # Step 0: Create data structures and find all unique letters.
    adj_list = defaultdict(set)
    counts = Counter({c : 0 for message in messages for c in message})
    
    # Step 1: We need to populate adj_list and counts.
    # For each pair of adjacent messages...
    for message1, message2 in zip(messages, messages[1:]):
        for c, d in zip(message1, message2):
            if c != d:
                if d not in adj_list[c]:
                    adj_list[c].add(d)
                    counts[d] += 1
                break
        else: # Check that second message isn't a prefix of first message.
            if len(message2) < len(message1): return ""
    
    # Step 2: We need to repeatedly pick off nodes with an indegree of 0.
    result = []
    queue = deque([c for c in counts if counts[c] == 0])
    while queue:
        c = queue.popleft()
        result.append(c)
        for d in adj_list[c]:
            counts[d] -= 1
            if counts[d] == 0:
                queue.append(d)
                
    # If not all letters are in result, that means there was a cycle and so
    # no valid ordering. Return "".
    if len(result) < len(counts):
        return ""
    # Otherwise, convert the ordering we found into a string and return it.
    return "".join(result)

# Example - 1
messages = ["mzosr", "mqov", "xxsvq", "xazv", "xazau", "xaqu", "suvzu", "suvxq", "suam", "suax", "rom", "rwx", "rwv"]
print("Dictionary = " ,find_dictionary(messages))

# Example - 2
messages = ["vanilla", "alpine", "algor", "port", "norm", "nylon", "ophellia", "hidden"]
print("Dictionary = ", find_dictionary(messages))