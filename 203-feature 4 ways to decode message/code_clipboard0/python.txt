memo = []

def num_plain_text(c):

    return memoization(0, c)

def memoization(index, c):
    # if (memo[index] != -1):
    #   return memo[index]
  
    # If we reach the end of the ciphertext, we return 1.
    if index == len(c):
      return 1
 
    # If the ciphertext starts with a zero, it can't be deciphered
    if c[index] == '0':
      return 0
 
    if index == len(c)-1:
      return 1
 
 
    # make a recursive call to the function with index + 1 for next substring
    result = memoization(index + 1, c)
 
    # make a recursive call to the function with index + 2 after checking for
    # valid two-digit decipher
    if int(c[index : index + 2]) <= 26:
            result += memoization(index + 2, c)
 
    # save the result to be used later, in case of overlapping subproblems.
    
    return result

# Driver code
c = "2317"
print("Number of possible plain text: " , num_plain_text(c))