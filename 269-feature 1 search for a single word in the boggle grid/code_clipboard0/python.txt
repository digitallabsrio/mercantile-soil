def exists(grid, word):
    for row in range(5):
        for col in range(5):
            if dfs(row, col, word, grid):
                return True

    return False

def dfs(row, col, suffix, grid):
    # base case
    if len(suffix) == 0:
        return True

    # check if this is a valid cell
    if row < 0 or row == 5 or col < 0 or col == 5 \
            or grid[row][col] != suffix[0]:
        return False

    ret = False
    # mark the cell as visited
    grid[row][col] = '#'
    # explore the four neighboring directions
    for rowOffset, colOffset in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
        ret = dfs(row + rowOffset, col + colOffset, suffix[1:], grid)
        # break instead of return directly to do some cleanup afterwards
        if ret: break

    # this will revert back the original value of the cell
    grid[row][col] = suffix[0]

    return ret

# Driver code
grid = [['C', 'S', 'L', 'I', 'M'], 
        ['O', 'I', 'L', 'M', 'O'], 
        ['O', 'L', 'I', 'E', 'O'], 
        ['R', 'T', 'A', 'S', 'N'], 
        ['S', 'I', 'T', 'A', 'C']]

word = "COIL"
print(exists(grid, word))

word = "COCOON"
print(exists(grid, word))