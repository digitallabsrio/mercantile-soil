from Trie import Trie

def search_words(grid, words):
    d = Trie()
    result = []
    # Inserting words in dictionary
    for word in words:
        d.insert(word)
    # Calling dfs for all the cells in the grid
    for j in range(5):
        for i in range(5):
            dfs(d.root, grid, j, i, result)
            
    return result

def dfs(node, grid, row, col, result, word=''):
    # Checking if we found the word
    if node.isWord:
        result.append(word)
        node.isWord = False

    if 0 <= row < 5 and 0 <= col < 5:
        char = grid[row][col]
        child = node.children.get(char)
        
        if child is not None:
            word += char
            # Marking it as visited before exploration
            grid[row][col] = None

            for rowOffset, colOffset in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                dfs(child, grid, row + rowOffset, col + colOffset, result, word)

            # Resotoring state after exploration
            grid[row][col] = char
        

## Driver Code
grid = [['B', 'S', 'L', 'I', 'M'], 
        ['R', 'I', 'L', 'M', 'O'], 
        ['O', 'L', 'I', 'E', 'O'], 
        ['R', 'Y', 'I', 'L', 'N'], 
        ['B', 'U', 'N', 'E', 'C']]

words = ["BUY", "SLICK", "SLIME", "ONLINE", "NOW"]

print(search_words(grid, words))