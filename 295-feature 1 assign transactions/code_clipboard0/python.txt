import math

class ListNode:
  def __init__(self,value): 
    self.value = value
    self.next = None 

class LinkedList:
  
  def display(result):
    d_list = []
    while result:
      d_list.append(result.value)
      result = result.next
    return d_list

# Assume that the linked list has at least t nodes.
# Reverse t nodes of the given linked list.
def reverse(head, t):
  new_head = None
  ptr = head # a pointer to traverse the original list.
  
  while t > 0:
    # Track the next node to traverse in the original list
    next_node = ptr.next

    # At the beginning of the reversed list,
    # insert the node pointed to by `ptr` 
    ptr.next = new_head
    new_head = ptr

    # Move on to the next node
    ptr = next_node

    # Decrement the count of nodes to be reversed by 1
    t-=1
  
  # Return reversed list's head
  return new_head

            
def reverse_transactions(head, t):
  ptr = head # a pointer to traverse the original list.
  ttail = None
  
  # Head of the final list that we need to return as the output.
  new_head = None
  
  # Keep traversing until there are nodes in the list
  while ptr:
    count = 0
  
    # Start counting nodes from the head
    ptr = head
    
    # Count the first t nodes.
    while count < t and ptr:
      ptr = ptr.next
      count += 1
    
    # If we counted t nodes, then we reverse them.   
    if count == t:
      # Reverse these t nodes and get the new head of the reversed list
      rev_head = reverse(head, t)
      # new_head is the head of the final linked list
      if not new_head:
        new_head = rev_head
  
      # the tail node of the previous t nodes after reversal.
      if ttail:
        ttail.next = rev_head
      
      ttail = head 
      head = ptr
      
  # if any nodes are not reveresed, then attack them to the reversed list
  if ttail:
    ttail.next = head
  
  if not new_head:
    return head
  else:
    return new_head
    
  # Driver Code
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

tempHead = head

print("Original linked list is:", LinkedList.display(tempHead))
N = 5 # number of stock transaction requests
K = 2 # number of brokers
t = math.floor(N/K)

if t <= 0:
    print("The expected 't' to have value from 1 to length of the linked list only.")
else:
    result = reverse_transactions(head, t)
    print("Reversed linked list is:", LinkedList.display(result))