from TreeNode import *
import math

def maxPathSum(root):
    max_sum = -math.inf
    def max_contrib(node):
        nonlocal max_sum
        left_subtree, right_subtree = 0, 0
        
        if not node: return 0

        # max sum on the left and right sub-trees of node
        if max_contrib(node.left) > 0:
            left_subtree = max_contrib(node.left)
        if max_contrib(node.right) > 0:    
            right_subtree = max_contrib(node.right)
        
        # the price to start a new path where `node` is a highest node
        price_newpath = node.val + left_subtree + right_subtree
        
        # update max_sum if it's better to start a new path
        max_sum = max(max_sum, price_newpath)
    
        # for recursion :
        # return the max contribution if continue the same path
        return node.val + max(left_subtree, right_subtree)
    max_contrib(root)
    return max_sum

# Driver Code

root = TreeNode(-8)
root.left = TreeNode(2)
root.right = TreeNode(17)
root.left.left = TreeNode(1)
root.left.right = TreeNode(4)
root.right.left = TreeNode(19)
root.right.right = TreeNode(5)

print(maxPathSum(root))

root2 = TreeNode(7)
root2.left = TreeNode(3)
root2.right = TreeNode(4)
root2.right.left = TreeNode(-1)
root2.right.right = TreeNode(-3)

print(maxPathSum(root2))