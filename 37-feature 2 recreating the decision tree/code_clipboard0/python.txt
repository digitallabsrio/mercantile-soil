class Tree(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right    

class Construct_Binary_Tree:
    def Re_Creating_Decision_Tree(self, preorder, inorder) -> Tree:
        def create_tree_from_val(left, right):
            
            nonlocal p_idx
            
            # if there are no elements to construct the tree
            if left > right: 
                return None

            # select the p_idx element as the root and increment it
            root_val = preorder[p_idx]
            root = Tree(root_val)

            p_idx = p_idx + 1

            # Constructing the left and right subtree using the root value i.e., root_val 
            # from the inorder_val_idx hashmap
            root.left = create_tree_from_val(left, inorder_val_idx[root_val] - 1)
            root.right = create_tree_from_val(inorder_val_idx[root_val] + 1, right)

            return root

        # Keeps track of index in preorder traversal.
        p_idx = 0

        # Storing the value -> index, in the inorder_val_idx hashmap.
        inorder_val_idx = {}
        for i, val in enumerate(inorder):
            inorder_val_idx[val] = i

        return create_tree_from_val(0, len(preorder) - 1)

# Driver Code
preorder = ["subject", "viewed", "notviewed", "similar", "nonsimilar"]
inorder = [ "viewed", "subject", "similar", "notviewed", "nonsimilar" ]

obj = Construct_Binary_Tree()
tree = obj.Re_Creating_Decision_Tree (preorder, inorder )
count = 10;
display_tree(tree)