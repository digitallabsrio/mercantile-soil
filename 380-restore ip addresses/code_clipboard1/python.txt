def valid(segment):

    # Check if the current segment is valid for either 
    # one of following conditions:
    # 1. Check if the current segment is less or equal to 255.  
    # 2. Check if the length of segment is 1. the first character of segment 
    #   can be `0` only if length of segment is 1.
    
    m = len(segment)
    if m > 3:
      return False

    return int(segment) <= 255 if segment[0] != '0' else len(segment) == 1

def update_segment(s, curr_pos, segments,result):
        
    # update_segment will append the current list of segments 
    # to the list of result.

    segment = s[curr_pos + 1:len(s)]

    if valid(segment):
        segments.append(segment)
        result.append('.'.join(segments))
        segments.pop() 

def backtrack(s, prev_pos, dots, segments, result):
    
        # prev_pos : the position of the previously placed dot
        # dots : number of dots to place
        
        # The current dot curr_pos could be placed 
        # in a range from prev_pos + 1 to prev_pos + 4.
        # The dot couldn't be placed 
        # after the last character in the string.
        size = len(s)
        for curr_pos in range(prev_pos + 1, min(size - 1, prev_pos + 4)):
            segment = s[prev_pos + 1:curr_pos + 1]
            if valid(segment):
                segments.append(segment)  # place dot
                if dots - 1 == 0:  # if all 3 dots are placed
                    update_segment(s, curr_pos, segments, result)  # add the solution to result
                else:
                    backtrack(s,curr_pos, dots - 1,segments,result)  # continue to place dots
                segments.pop()  # remove the last placed dot

def restore_ip_addresses(s):
    
    result, segments = [], []
    backtrack(s, -1, 3, segments, result) 
    return result

str = "0000"
result = restore_ip_addresses(str)
print(result)

# Example - 2
str = "25525511135"
result = restore_ip_addresses(str)
print(result)

# Example - 3
str = "12121212"
result = restore_ip_addresses(str)
print(result)