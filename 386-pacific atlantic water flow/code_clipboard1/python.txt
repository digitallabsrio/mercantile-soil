def bfs(queue, heights):
    num_rows = len(heights)
    num_cols = len(heights[0])
    directions = [[0, 1], [1, 0], [-1, 0], [0, -1]]
    
    reachable = []
    for i in range(num_rows):
        temp = []
        for j in range(num_cols):
            temp.append(False)
        reachable.append(temp)

    while queue:
        cell =queue.pop(0)
        # This cell is reachable, so mark it

        reachable[cell[0]][cell[1]]= True
    
        # Check all 4 directions
        for dir in directions:  
            new_row = cell[0] + dir[0]
            new_col = cell[1] + dir[1]
        
            # Check if new cell is within bounds
            if new_row >= 0 and new_row < num_rows and new_col >= 0 and new_col < num_cols:

                # Check that the new cell hasn't already been visited
                if not reachable[new_row][new_col]: 
                    # Check that the new cell has a higher or equal height,
                    # So that water can flow from the new cell to the old cell
                    if heights[new_row][new_col] >= heights[cell[0]][cell[1]]:
                        # If we've gotten this far, that means the new cell is reachable
                        queue.append([new_row, new_col])

    return reachable


def pacific_atlantic(heights):
    # Check if input is empty
    if len(heights) == 0 or len(heights[0]) == 0:
        return 
    
    # Save initial values to parameters
    num_rows = len(heights)
    num_cols = len(heights[0])
    
    # Setup each queue with cells adjacent to the Pacific ocean
    queue = []
    for  i in range(num_rows):
        queue.append([i, 0])
    
    for  i in range(num_cols):
        queue.append([0, i])
    
    # Perform a BFS for Pacific ocean to find all cells accessible by the Pacific ocean
    pacific_reachable = bfs(queue, heights)
    
    # Setup each queue with cells adjacent to the Atlantic ocean
    for  i in range(num_rows):
        queue.append([i, num_cols - 1])
    
    for  i in range(num_cols):
        queue.append([num_rows - 1, i])
    

    # Perform a BFS for Atlantic ocean to find all cells accessible by the Atlantic ocean
    atlantic_reachable = bfs(queue, heights)

    # Find all cells that can reach both oceans
    common_cells = []
    for  i in range(num_rows):
        for  j in range(num_cols):
            if pacific_reachable[i][j] and atlantic_reachable[i][j]: 
                common_cells.append([i, j])
        
    return common_cells


# driver code
    
# Example - 1
heights = [[2, 1], [1, 2]]
output = pacific_atlantic(heights)
print(output)

# Example - 2
heights = [[1, 2, 3, 2, 6], [3, 2, 5, 4, 5], [1, 4, 6, 3, 2], [6, 7, 2, 4, 3], [5, 1, 1, 1, 4]]
output = pacific_atlantic(heights)
print(output)


# Example - 3
heights = [[1, 3, 2], [2, 3, 2], [3, 2, 1]]
output = pacific_atlantic(heights)
print(output)