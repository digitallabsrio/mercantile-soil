class Node:
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.left = self.right = None

class BST(object):
    def __init__(self):
        self.root = None

    def insert(self, start, end):
        if self.root is None:
            self.root = Node(start, end)
            return True
        return self.add_node(self.root, Node(start, end))

    def add_node(self, curr_node, new_node):
        if new_node.start >= curr_node.end:
            if not curr_node.right:
                curr_node.right = new_node
                return True
            return self.add_node(curr_node.right, new_node)
        elif new_node.end <= curr_node.start:
            if not curr_node.left:
                curr_node.left = new_node
                return True
            return self.add_node(curr_node.left, new_node)
        else:
            return False

def check_meeting(meeting_times, new_meeting):
    tree = BST()
    for meeting in meeting_times:
        tree.insert(meeting[0], meeting[1])
    return tree.insert(new_meeting[0], new_meeting[1])
        

meeting_times = [[1, 3], [4, 6], [8, 10], [10, 12], [13, 15]]
new_meeting = [7, 8]
print(check_meeting(meeting_times, new_meeting))
new_meeting = [9, 11]
print(check_meeting(meeting_times, new_meeting))