def two_sets_of_days(hours_per_day, k):
    map = {}
    sum = 0
    lsize = float('inf')
    result = float('inf')
    map[0] = -1

    for i, day in enumerate(hours_per_day):
        sum += day
        map[sum] = i
   
    sum = 0
    for i, day in enumerate(hours_per_day):
        sum += day
        if (sum - k) in map:
            # stores minimum length of sub-array ending with index<= i with sum k. This ensures non- overlapping property.
            lsize = min(lsize, i - map[sum - k])
        if (sum + k) in map and lsize < float('inf'):
            result = min(result, map[sum + k] - i + lsize)
    
    if result == float('inf'): 
        return -1
    else: 
        return result

#  Driver code
hours_per_day = [1, 2, 2, 3, 2, 6, 7, 2, 1, 4, 8]
k = 5;
print(two_sets_of_days(hours_per_day, k))
